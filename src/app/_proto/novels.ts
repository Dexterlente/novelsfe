/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: novels.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace novels {
    export class Novel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            novel_id?: number;
            title?: string;
            image_url?: string;
            synopsis?: string;
            images?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("novel_id" in data && data.novel_id != undefined) {
                    this.novel_id = data.novel_id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("image_url" in data && data.image_url != undefined) {
                    this.image_url = data.image_url;
                }
                if ("synopsis" in data && data.synopsis != undefined) {
                    this.synopsis = data.synopsis;
                }
                if ("images" in data && data.images != undefined) {
                    this.images = data.images;
                }
            }
        }
        get novel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set novel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get image_url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set image_url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get synopsis() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set synopsis(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get images() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set images(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            novel_id?: number;
            title?: string;
            image_url?: string;
            synopsis?: string;
            images?: string;
        }): Novel {
            const message = new Novel({});
            if (data.novel_id != null) {
                message.novel_id = data.novel_id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.image_url != null) {
                message.image_url = data.image_url;
            }
            if (data.synopsis != null) {
                message.synopsis = data.synopsis;
            }
            if (data.images != null) {
                message.images = data.images;
            }
            return message;
        }
        toObject() {
            const data: {
                novel_id?: number;
                title?: string;
                image_url?: string;
                synopsis?: string;
                images?: string;
            } = {};
            if (this.novel_id != null) {
                data.novel_id = this.novel_id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.image_url != null) {
                data.image_url = this.image_url;
            }
            if (this.synopsis != null) {
                data.synopsis = this.synopsis;
            }
            if (this.images != null) {
                data.images = this.images;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.novel_id != 0)
                writer.writeInt32(1, this.novel_id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.image_url.length)
                writer.writeString(3, this.image_url);
            if (this.synopsis.length)
                writer.writeString(4, this.synopsis);
            if (this.images.length)
                writer.writeString(5, this.images);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Novel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Novel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.novel_id = reader.readInt32();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.image_url = reader.readString();
                        break;
                    case 4:
                        message.synopsis = reader.readString();
                        break;
                    case 5:
                        message.images = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Novel {
            return Novel.deserialize(bytes);
        }
    }
    export class NovelList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            novels?: Novel[];
            total_pages?: number;
            current_page?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("novels" in data && data.novels != undefined) {
                    this.novels = data.novels;
                }
                if ("total_pages" in data && data.total_pages != undefined) {
                    this.total_pages = data.total_pages;
                }
                if ("current_page" in data && data.current_page != undefined) {
                    this.current_page = data.current_page;
                }
            }
        }
        get novels() {
            return pb_1.Message.getRepeatedWrapperField(this, Novel, 1) as Novel[];
        }
        set novels(value: Novel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_pages() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_pages(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get current_page() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set current_page(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            novels?: ReturnType<typeof Novel.prototype.toObject>[];
            total_pages?: number;
            current_page?: number;
        }): NovelList {
            const message = new NovelList({});
            if (data.novels != null) {
                message.novels = data.novels.map(item => Novel.fromObject(item));
            }
            if (data.total_pages != null) {
                message.total_pages = data.total_pages;
            }
            if (data.current_page != null) {
                message.current_page = data.current_page;
            }
            return message;
        }
        toObject() {
            const data: {
                novels?: ReturnType<typeof Novel.prototype.toObject>[];
                total_pages?: number;
                current_page?: number;
            } = {};
            if (this.novels != null) {
                data.novels = this.novels.map((item: Novel) => item.toObject());
            }
            if (this.total_pages != null) {
                data.total_pages = this.total_pages;
            }
            if (this.current_page != null) {
                data.current_page = this.current_page;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.novels.length)
                writer.writeRepeatedMessage(1, this.novels, (item: Novel) => item.serialize(writer));
            if (this.total_pages != 0)
                writer.writeInt32(2, this.total_pages);
            if (this.current_page != 0)
                writer.writeInt32(3, this.current_page);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NovelList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NovelList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.novels, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Novel.deserialize(reader), Novel));
                        break;
                    case 2:
                        message.total_pages = reader.readInt32();
                        break;
                    case 3:
                        message.current_page = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NovelList {
            return NovelList.deserialize(bytes);
        }
    }
    export class Genres extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            genre?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("genre" in data && data.genre != undefined) {
                    this.genre = data.genre;
                }
            }
        }
        get genre() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set genre(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            genre?: string;
        }): Genres {
            const message = new Genres({});
            if (data.genre != null) {
                message.genre = data.genre;
            }
            return message;
        }
        toObject() {
            const data: {
                genre?: string;
            } = {};
            if (this.genre != null) {
                data.genre = this.genre;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.genre.length)
                writer.writeString(1, this.genre);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Genres {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Genres();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.genre = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Genres {
            return Genres.deserialize(bytes);
        }
    }
    export class GenreList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            novels?: Genres[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("novels" in data && data.novels != undefined) {
                    this.novels = data.novels;
                }
            }
        }
        get novels() {
            return pb_1.Message.getRepeatedWrapperField(this, Genres, 1) as Genres[];
        }
        set novels(value: Genres[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            novels?: ReturnType<typeof Genres.prototype.toObject>[];
        }): GenreList {
            const message = new GenreList({});
            if (data.novels != null) {
                message.novels = data.novels.map(item => Genres.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                novels?: ReturnType<typeof Genres.prototype.toObject>[];
            } = {};
            if (this.novels != null) {
                data.novels = this.novels.map((item: Genres) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.novels.length)
                writer.writeRepeatedMessage(1, this.novels, (item: Genres) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenreList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenreList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.novels, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Genres.deserialize(reader), Genres));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenreList {
            return GenreList.deserialize(bytes);
        }
    }
}
