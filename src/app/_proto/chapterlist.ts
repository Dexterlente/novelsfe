/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: chapterlist.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace chapters {
    export class Chapter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            novel_id?: number;
            title?: string;
            timestamp?: string;
            index?: number;
            subchapter?: number;
            novel_title?: string;
            image_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("novel_id" in data && data.novel_id != undefined) {
                    this.novel_id = data.novel_id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("subchapter" in data && data.subchapter != undefined) {
                    this.subchapter = data.subchapter;
                }
                if ("novel_title" in data && data.novel_title != undefined) {
                    this.novel_title = data.novel_title;
                }
                if ("image_url" in data && data.image_url != undefined) {
                    this.image_url = data.image_url;
                }
            }
        }
        get novel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set novel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set timestamp(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get subchapter() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set subchapter(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get novel_title() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set novel_title(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get image_url() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set image_url(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            novel_id?: number;
            title?: string;
            timestamp?: string;
            index?: number;
            subchapter?: number;
            novel_title?: string;
            image_url?: string;
        }): Chapter {
            const message = new Chapter({});
            if (data.novel_id != null) {
                message.novel_id = data.novel_id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.subchapter != null) {
                message.subchapter = data.subchapter;
            }
            if (data.novel_title != null) {
                message.novel_title = data.novel_title;
            }
            if (data.image_url != null) {
                message.image_url = data.image_url;
            }
            return message;
        }
        toObject() {
            const data: {
                novel_id?: number;
                title?: string;
                timestamp?: string;
                index?: number;
                subchapter?: number;
                novel_title?: string;
                image_url?: string;
            } = {};
            if (this.novel_id != null) {
                data.novel_id = this.novel_id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.subchapter != null) {
                data.subchapter = this.subchapter;
            }
            if (this.novel_title != null) {
                data.novel_title = this.novel_title;
            }
            if (this.image_url != null) {
                data.image_url = this.image_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.novel_id != 0)
                writer.writeInt32(1, this.novel_id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.timestamp.length)
                writer.writeString(3, this.timestamp);
            if (this.index != 0)
                writer.writeInt32(4, this.index);
            if (this.subchapter != 0)
                writer.writeInt32(5, this.subchapter);
            if (this.novel_title.length)
                writer.writeString(6, this.novel_title);
            if (this.image_url.length)
                writer.writeString(7, this.image_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Chapter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Chapter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.novel_id = reader.readInt32();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readString();
                        break;
                    case 4:
                        message.index = reader.readInt32();
                        break;
                    case 5:
                        message.subchapter = reader.readInt32();
                        break;
                    case 6:
                        message.novel_title = reader.readString();
                        break;
                    case 7:
                        message.image_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Chapter {
            return Chapter.deserialize(bytes);
        }
    }
    export class ChaptersList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chapters?: Chapter[];
            total_pages?: number;
            current_page?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chapters" in data && data.chapters != undefined) {
                    this.chapters = data.chapters;
                }
                if ("total_pages" in data && data.total_pages != undefined) {
                    this.total_pages = data.total_pages;
                }
                if ("current_page" in data && data.current_page != undefined) {
                    this.current_page = data.current_page;
                }
            }
        }
        get chapters() {
            return pb_1.Message.getRepeatedWrapperField(this, Chapter, 1) as Chapter[];
        }
        set chapters(value: Chapter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_pages() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_pages(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get current_page() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set current_page(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            chapters?: ReturnType<typeof Chapter.prototype.toObject>[];
            total_pages?: number;
            current_page?: number;
        }): ChaptersList {
            const message = new ChaptersList({});
            if (data.chapters != null) {
                message.chapters = data.chapters.map(item => Chapter.fromObject(item));
            }
            if (data.total_pages != null) {
                message.total_pages = data.total_pages;
            }
            if (data.current_page != null) {
                message.current_page = data.current_page;
            }
            return message;
        }
        toObject() {
            const data: {
                chapters?: ReturnType<typeof Chapter.prototype.toObject>[];
                total_pages?: number;
                current_page?: number;
            } = {};
            if (this.chapters != null) {
                data.chapters = this.chapters.map((item: Chapter) => item.toObject());
            }
            if (this.total_pages != null) {
                data.total_pages = this.total_pages;
            }
            if (this.current_page != null) {
                data.current_page = this.current_page;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chapters.length)
                writer.writeRepeatedMessage(1, this.chapters, (item: Chapter) => item.serialize(writer));
            if (this.total_pages != 0)
                writer.writeInt32(2, this.total_pages);
            if (this.current_page != 0)
                writer.writeInt32(3, this.current_page);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChaptersList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChaptersList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.chapters, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Chapter.deserialize(reader), Chapter));
                        break;
                    case 2:
                        message.total_pages = reader.readInt32();
                        break;
                    case 3:
                        message.current_page = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChaptersList {
            return ChaptersList.deserialize(bytes);
        }
    }
}
